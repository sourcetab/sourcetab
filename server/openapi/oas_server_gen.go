// Code generated by ogen, DO NOT EDIT.

package openapi

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// AccountStatus implements accountStatus operation.
	//
	// Retrieve account status.
	//
	// GET /api/v1/auth/status
	AccountStatus(ctx context.Context) (AccountStatusRes, error)
	// CreateProject implements createProject operation.
	//
	// Create project.
	//
	// POST /api/v1/projects
	CreateProject(ctx context.Context, req *CreateProjectReq) (CreateProjectRes, error)
	// DeleteAccount implements deleteAccount operation.
	//
	// Delete the authenticated account and it's data.
	//
	// DELETE /api/v1/auth/delete
	DeleteAccount(ctx context.Context) (DeleteAccountRes, error)
	// GetProjectById implements getProjectById operation.
	//
	// Find project by ID.
	//
	// GET /api/v1/projects/{projectID}
	GetProjectById(ctx context.Context, params GetProjectByIdParams) (GetProjectByIdRes, error)
	// GetUserById implements getUserById operation.
	//
	// Find user by ID.
	//
	// GET /api/v1/users/{userID}
	GetUserById(ctx context.Context, params GetUserByIdParams) (GetUserByIdRes, error)
	// GetUserByName implements getUserByName operation.
	//
	// Find user by username.
	//
	// GET /api/v1/users/name/{username}
	GetUserByName(ctx context.Context, params GetUserByNameParams) (GetUserByNameRes, error)
	// ListProjects implements listProjects operation.
	//
	// List projects.
	//
	// GET /api/v1/projects
	ListProjects(ctx context.Context) (ListProjectsRes, error)
	// ListUsers implements listUsers operation.
	//
	// List users.
	//
	// GET /api/v1/users
	ListUsers(ctx context.Context) (ListUsersRes, error)
	// LoginAccount implements loginAccount operation.
	//
	// Generate and fetch auth token.
	//
	// POST /api/v1/auth/login
	LoginAccount(ctx context.Context, req *LoginAccountReq) (LoginAccountRes, error)
	// LogoutAccount implements logoutAccount operation.
	//
	// Revoke authentication token.
	//
	// POST /api/v1/auth/logout
	LogoutAccount(ctx context.Context) (LogoutAccountRes, error)
	// RefreshToken implements refreshToken operation.
	//
	// Refresh authentication token.
	//
	// POST /api/v1/auth/refresh
	RefreshToken(ctx context.Context) (RefreshTokenRes, error)
	// RegisterAccount implements registerAccount operation.
	//
	// Register a new account.
	//
	// POST /api/v1/auth/register
	RegisterAccount(ctx context.Context, req *RegisterAccountReq) (RegisterAccountRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
