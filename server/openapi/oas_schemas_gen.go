// Code generated by ogen, DO NOT EDIT.

package openapi

import (
	"time"

	"github.com/go-faster/errors"
	"github.com/google/uuid"
)

type AccountStatusOK struct {
	User User `json:"user"`
}

// GetUser returns the value of User.
func (s *AccountStatusOK) GetUser() User {
	return s.User
}

// SetUser sets the value of User.
func (s *AccountStatusOK) SetUser(val User) {
	s.User = val
}

func (*AccountStatusOK) accountStatusRes() {}

type BearerAuth struct {
	Token string
}

// GetToken returns the value of Token.
func (s *BearerAuth) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *BearerAuth) SetToken(val string) {
	s.Token = val
}

type CreateProjectReq struct {
	Type       CreateProjectReqType       `json:"type"`
	Visibility CreateProjectReqVisibility `json:"visibility"`
	Name       string                      `json:"name"`
	Data       string                      `json:"data"`
}

// GetType returns the value of Type.
func (s *CreateProjectReq) GetType() CreateProjectReqType {
	return s.Type
}

// GetVisibility returns the value of Visibility.
func (s *CreateProjectReq) GetVisibility() CreateProjectReqVisibility {
	return s.Visibility
}

// GetName returns the value of Name.
func (s *CreateProjectReq) GetName() string {
	return s.Name
}

// GetData returns the value of Data.
func (s *CreateProjectReq) GetData() string {
	return s.Data
}

// SetType sets the value of Type.
func (s *CreateProjectReq) SetType(val CreateProjectReqType) {
	s.Type = val
}

// SetVisibility sets the value of Visibility.
func (s *CreateProjectReq) SetVisibility(val CreateProjectReqVisibility) {
	s.Visibility = val
}

// SetName sets the value of Name.
func (s *CreateProjectReq) SetName(val string) {
	s.Name = val
}

// SetData sets the value of Data.
func (s *CreateProjectReq) SetData(val string) {
	s.Data = val
}

type CreateProjectReqType string

const (
	CreateProjectReqTypeWorkspace CreateProjectReqType = "workspace"
	CreateProjectReqTypeTheme     CreateProjectReqType = "theme"
)

// AllValues returns all CreateProjectReqType values.
func (CreateProjectReqType) AllValues() []CreateProjectReqType {
	return []CreateProjectReqType{
		CreateProjectReqTypeWorkspace,
		CreateProjectReqTypeTheme,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateProjectReqType) MarshalText() ([]byte, error) {
	switch s {
	case CreateProjectReqTypeWorkspace:
		return []byte(s), nil
	case CreateProjectReqTypeTheme:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateProjectReqType) UnmarshalText(data []byte) error {
	switch CreateProjectReqType(data) {
	case CreateProjectReqTypeWorkspace:
		*s = CreateProjectReqTypeWorkspace
		return nil
	case CreateProjectReqTypeTheme:
		*s = CreateProjectReqTypeTheme
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateProjectReqVisibility string

const (
	CreateProjectReqVisibilityPublic  CreateProjectReqVisibility = "public"
	CreateProjectReqVisibilityPrivate CreateProjectReqVisibility = "private"
)

// AllValues returns all CreateProjectReqVisibility values.
func (CreateProjectReqVisibility) AllValues() []CreateProjectReqVisibility {
	return []CreateProjectReqVisibility{
		CreateProjectReqVisibilityPublic,
		CreateProjectReqVisibilityPrivate,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateProjectReqVisibility) MarshalText() ([]byte, error) {
	switch s {
	case CreateProjectReqVisibilityPublic:
		return []byte(s), nil
	case CreateProjectReqVisibilityPrivate:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateProjectReqVisibility) UnmarshalText(data []byte) error {
	switch CreateProjectReqVisibility(data) {
	case CreateProjectReqVisibilityPublic:
		*s = CreateProjectReqVisibilityPublic
		return nil
	case CreateProjectReqVisibilityPrivate:
		*s = CreateProjectReqVisibilityPrivate
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// CreateProjectUnauthorized is response for CreateProject operation.
type CreateProjectUnauthorized struct{}

func (*CreateProjectUnauthorized) createProjectRes() {}

// DeleteAccountOK is response for DeleteAccount operation.
type DeleteAccountOK struct{}

func (*DeleteAccountOK) deleteAccountRes() {}

// DeleteAccountUnauthorized is response for DeleteAccount operation.
type DeleteAccountUnauthorized struct{}

func (*DeleteAccountUnauthorized) deleteAccountRes() {}

type Email string

// GetProjectByIdNotFound is response for GetProjectById operation.
type GetProjectByIdNotFound struct{}

func (*GetProjectByIdNotFound) getProjectByIdRes() {}

// GetUserByIdNotFound is response for GetUserById operation.
type GetUserByIdNotFound struct{}

func (*GetUserByIdNotFound) getUserByIdRes() {}

// GetUserByNameNotFound is response for GetUserByName operation.
type GetUserByNameNotFound struct{}

func (*GetUserByNameNotFound) getUserByNameRes() {}

type ID int64

type ListProjectsOKApplicationJSON []Project

func (*ListProjectsOKApplicationJSON) listProjectsRes() {}

type ListUsersOKApplicationJSON []User

func (*ListUsersOKApplicationJSON) listUsersRes() {}

type LoginAccountOK struct {
	Session Session `json:"session"`
	User    User    `json:"user"`
}

// GetSession returns the value of Session.
func (s *LoginAccountOK) GetSession() Session {
	return s.Session
}

// GetUser returns the value of User.
func (s *LoginAccountOK) GetUser() User {
	return s.User
}

// SetSession sets the value of Session.
func (s *LoginAccountOK) SetSession(val Session) {
	s.Session = val
}

// SetUser sets the value of User.
func (s *LoginAccountOK) SetUser(val User) {
	s.User = val
}

func (*LoginAccountOK) loginAccountRes() {}

type LoginAccountReq struct {
	Username Username `json:"username"`
	Password Password `json:"password"`
}

// GetUsername returns the value of Username.
func (s *LoginAccountReq) GetUsername() Username {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *LoginAccountReq) GetPassword() Password {
	return s.Password
}

// SetUsername sets the value of Username.
func (s *LoginAccountReq) SetUsername(val Username) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *LoginAccountReq) SetPassword(val Password) {
	s.Password = val
}

// LoginAccountUnauthorized is response for LoginAccount operation.
type LoginAccountUnauthorized struct{}

func (*LoginAccountUnauthorized) loginAccountRes() {}

// LogoutAccountOK is response for LogoutAccount operation.
type LogoutAccountOK struct{}

func (*LogoutAccountOK) logoutAccountRes() {}

// LogoutAccountUnauthorized is response for LogoutAccount operation.
type LogoutAccountUnauthorized struct{}

func (*LogoutAccountUnauthorized) logoutAccountRes() {}

type Password string

// Ref: #/components/responses/RateLimitError
type RateLimitError struct{}

func (*RateLimitError) accountStatusRes()   {}
func (*RateLimitError) createProjectRes()  {}
func (*RateLimitError) deleteAccountRes()   {}
func (*RateLimitError) getProjectByIdRes() {}
func (*RateLimitError) getUserByIdRes()     {}
func (*RateLimitError) getUserByNameRes()   {}
func (*RateLimitError) listProjectsRes()   {}
func (*RateLimitError) listUsersRes()       {}
func (*RateLimitError) loginAccountRes()    {}
func (*RateLimitError) logoutAccountRes()   {}
func (*RateLimitError) refreshTokenRes()    {}
func (*RateLimitError) registerAccountRes() {}

// RefreshTokenUnauthorized is response for RefreshToken operation.
type RefreshTokenUnauthorized struct{}

func (*RefreshTokenUnauthorized) refreshTokenRes() {}

// RegisterAccountBadRequest is response for RegisterAccount operation.
type RegisterAccountBadRequest struct{}

func (*RegisterAccountBadRequest) registerAccountRes() {}

type RegisterAccountOK struct {
	User User `json:"user"`
}

// GetUser returns the value of User.
func (s *RegisterAccountOK) GetUser() User {
	return s.User
}

// SetUser sets the value of User.
func (s *RegisterAccountOK) SetUser(val User) {
	s.User = val
}

func (*RegisterAccountOK) registerAccountRes() {}

type RegisterAccountReq struct {
	Username Username `json:"username"`
	Email    Email    `json:"email"`
	Password Password `json:"password"`
}

// GetUsername returns the value of Username.
func (s *RegisterAccountReq) GetUsername() Username {
	return s.Username
}

// GetEmail returns the value of Email.
func (s *RegisterAccountReq) GetEmail() Email {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *RegisterAccountReq) GetPassword() Password {
	return s.Password
}

// SetUsername sets the value of Username.
func (s *RegisterAccountReq) SetUsername(val Username) {
	s.Username = val
}

// SetEmail sets the value of Email.
func (s *RegisterAccountReq) SetEmail(val Email) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *RegisterAccountReq) SetPassword(val Password) {
	s.Password = val
}

// Ref: #/components/schemas/Project
type Project struct {
	ID         ID                 `json:"id"`
	CreatedAt  time.Time          `json:"createdAt"`
	UpdatedAt  time.Time          `json:"updatedAt"`
	Type       ProjectType       `json:"type"`
	UserID     ID                 `json:"userID"`
	Visibility ProjectVisibility `json:"visibility"`
	Name       string             `json:"name"`
	Data       string             `json:"data"`
}

// GetID returns the value of ID.
func (s *Project) GetID() ID {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Project) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Project) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetType returns the value of Type.
func (s *Project) GetType() ProjectType {
	return s.Type
}

// GetUserID returns the value of UserID.
func (s *Project) GetUserID() ID {
	return s.UserID
}

// GetVisibility returns the value of Visibility.
func (s *Project) GetVisibility() ProjectVisibility {
	return s.Visibility
}

// GetName returns the value of Name.
func (s *Project) GetName() string {
	return s.Name
}

// GetData returns the value of Data.
func (s *Project) GetData() string {
	return s.Data
}

// SetID sets the value of ID.
func (s *Project) SetID(val ID) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Project) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Project) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetType sets the value of Type.
func (s *Project) SetType(val ProjectType) {
	s.Type = val
}

// SetUserID sets the value of UserID.
func (s *Project) SetUserID(val ID) {
	s.UserID = val
}

// SetVisibility sets the value of Visibility.
func (s *Project) SetVisibility(val ProjectVisibility) {
	s.Visibility = val
}

// SetName sets the value of Name.
func (s *Project) SetName(val string) {
	s.Name = val
}

// SetData sets the value of Data.
func (s *Project) SetData(val string) {
	s.Data = val
}

func (*Project) createProjectRes()  {}
func (*Project) getProjectByIdRes() {}

type ProjectType string

const (
	ProjectTypeWorkspace ProjectType = "workspace"
	ProjectTypeTheme     ProjectType = "theme"
)

// AllValues returns all ProjectType values.
func (ProjectType) AllValues() []ProjectType {
	return []ProjectType{
		ProjectTypeWorkspace,
		ProjectTypeTheme,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ProjectType) MarshalText() ([]byte, error) {
	switch s {
	case ProjectTypeWorkspace:
		return []byte(s), nil
	case ProjectTypeTheme:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ProjectType) UnmarshalText(data []byte) error {
	switch ProjectType(data) {
	case ProjectTypeWorkspace:
		*s = ProjectTypeWorkspace
		return nil
	case ProjectTypeTheme:
		*s = ProjectTypeTheme
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ProjectVisibility string

const (
	ProjectVisibilityPublic  ProjectVisibility = "public"
	ProjectVisibilityPrivate ProjectVisibility = "private"
)

// AllValues returns all ProjectVisibility values.
func (ProjectVisibility) AllValues() []ProjectVisibility {
	return []ProjectVisibility{
		ProjectVisibilityPublic,
		ProjectVisibilityPrivate,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ProjectVisibility) MarshalText() ([]byte, error) {
	switch s {
	case ProjectVisibilityPublic:
		return []byte(s), nil
	case ProjectVisibilityPrivate:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ProjectVisibility) UnmarshalText(data []byte) error {
	switch ProjectVisibility(data) {
	case ProjectVisibilityPublic:
		*s = ProjectVisibilityPublic
		return nil
	case ProjectVisibilityPrivate:
		*s = ProjectVisibilityPrivate
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/responses/ServerError
type ServerError struct{}

func (*ServerError) accountStatusRes()   {}
func (*ServerError) createProjectRes()  {}
func (*ServerError) deleteAccountRes()   {}
func (*ServerError) getProjectByIdRes() {}
func (*ServerError) getUserByIdRes()     {}
func (*ServerError) getUserByNameRes()   {}
func (*ServerError) listProjectsRes()   {}
func (*ServerError) listUsersRes()       {}
func (*ServerError) loginAccountRes()    {}
func (*ServerError) logoutAccountRes()   {}
func (*ServerError) refreshTokenRes()    {}
func (*ServerError) registerAccountRes() {}

// Ref: #/components/schemas/Session
type Session struct {
	Token   uuid.UUID `json:"token"`
	Expires time.Time `json:"expires"`
}

// GetToken returns the value of Token.
func (s *Session) GetToken() uuid.UUID {
	return s.Token
}

// GetExpires returns the value of Expires.
func (s *Session) GetExpires() time.Time {
	return s.Expires
}

// SetToken sets the value of Token.
func (s *Session) SetToken(val uuid.UUID) {
	s.Token = val
}

// SetExpires sets the value of Expires.
func (s *Session) SetExpires(val time.Time) {
	s.Expires = val
}

func (*Session) refreshTokenRes() {}

// Ref: #/components/schemas/User
type User struct {
	ID        ID        `json:"id"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
	Username  Username  `json:"username"`
}

// GetID returns the value of ID.
func (s *User) GetID() ID {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *User) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *User) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetUsername returns the value of Username.
func (s *User) GetUsername() Username {
	return s.Username
}

// SetID sets the value of ID.
func (s *User) SetID(val ID) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *User) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *User) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetUsername sets the value of Username.
func (s *User) SetUsername(val Username) {
	s.Username = val
}

func (*User) getUserByIdRes()   {}
func (*User) getUserByNameRes() {}

type Username string
